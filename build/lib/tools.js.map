{
  "version": 3,
  "sources": ["../../src/lib/tools.ts"],
  "sourcesContent": ["import axios from \"axios\";\n\n/**\n * Tests whether the given variable is a real object and not an Array\n * @param it The variable to test\n */\nexport function isObject(it: unknown): it is Record<string, any> {\n    // This is necessary because:\n    // typeof null === 'object'\n    // typeof [] === 'object'\n    // [] instanceof Object === true\n    return Object.prototype.toString.call(it) === \"[object Object]\";\n}\n\n/**\n * Tests whether the given variable is really an Array\n * @param it The variable to test\n */\nexport function isArray(it: unknown): it is any[] {\n    if (Array.isArray != null) return Array.isArray(it);\n    return Object.prototype.toString.call(it) === \"[object Array]\";\n}\n\n/**\n * Translates text using the Google Translate API\n * @param text The text to translate\n * @param targetLang The target languate\n * @param yandexApiKey The yandex API key. You can create one for free at https://translate.yandex.com/developers\n */\nexport async function translateText(text: string, targetLang: string, yandexApiKey?: string): Promise<string> {\n    if (targetLang === \"en\") {\n        return text;\n    } else if (!text) {\n        return \"\";\n    }\n    if (yandexApiKey) {\n        return translateYandex(text, targetLang, yandexApiKey);\n    } else {\n        return translateGoogle(text, targetLang);\n    }\n}\n\n/**\n * Translates text with Yandex API\n * @param text The text to translate\n * @param targetLang The target languate\n * @param apiKey The yandex API key. You can create one for free at https://translate.yandex.com/developers\n */\nasync function translateYandex(text: string, targetLang: string, apiKey: string): Promise<string> {\n    if (targetLang === \"zh-cn\") {\n        targetLang = \"zh\";\n    }\n    try {\n        const url = `https://translate.yandex.net/api/v1.5/tr.json/translate?key=${apiKey}&text=${encodeURIComponent(\n            text,\n        )}&lang=en-${targetLang}`;\n        const response = await axios({ url, timeout: 15000 });\n        if (isArray(response.data?.text)) {\n            return response.data.text[0];\n        }\n        throw new Error(\"Invalid response for translate request\");\n    } catch (e) {\n        throw new Error(`Could not translate to \"${targetLang}\": ${e}`);\n    }\n}\n\n/**\n * Translates text with Google API\n * @param text The text to translate\n * @param targetLang The target languate\n */\nasync function translateGoogle(text: string, targetLang: string): Promise<string> {\n    try {\n        const url = `http://translate.googleapis.com/translate_a/single?client=gtx&sl=en&tl=${targetLang}&dt=t&q=${encodeURIComponent(\n            text,\n        )}&ie=UTF-8&oe=UTF-8`;\n        const response = await axios({ url, timeout: 15000 });\n        if (isArray(response.data)) {\n            // we got a valid response\n            return response.data[0][0][0];\n        }\n        throw new Error(\"Invalid response for translate request\");\n    } catch (e) {\n        if (e.response?.status === 429) {\n            throw new Error(`Could not translate to \"${targetLang}\": Rate-limited by Google Translate`);\n        } else {\n            throw new Error(`Could not translate to \"${targetLang}\": ${e}`);\n        }\n    }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAkB;AAMX,SAAS,SAAS,IAAwC;AAK7D,SAAO,OAAO,UAAU,SAAS,KAAK,EAAE,MAAM;AAClD;AAMO,SAAS,QAAQ,IAA0B;AAC9C,MAAI,MAAM,WAAW;AAAM,WAAO,MAAM,QAAQ,EAAE;AAClD,SAAO,OAAO,UAAU,SAAS,KAAK,EAAE,MAAM;AAClD;AAQA,eAAsB,cAAc,MAAc,YAAoB,cAAwC;AAC1G,MAAI,eAAe,MAAM;AACrB,WAAO;AAAA,EACX,WAAW,CAAC,MAAM;AACd,WAAO;AAAA,EACX;AACA,MAAI,cAAc;AACd,WAAO,gBAAgB,MAAM,YAAY,YAAY;AAAA,EACzD,OAAO;AACH,WAAO,gBAAgB,MAAM,UAAU;AAAA,EAC3C;AACJ;AAQA,eAAe,gBAAgB,MAAc,YAAoB,QAAiC;AAhDlG;AAiDI,MAAI,eAAe,SAAS;AACxB,iBAAa;AAAA,EACjB;AACA,MAAI;AACA,UAAM,MAAM,+DAA+D,eAAe;AAAA,MACtF;AAAA,IACJ,aAAa;AACb,UAAM,WAAW,UAAM,aAAAA,SAAM,EAAE,KAAK,SAAS,KAAM,CAAC;AACpD,QAAI,SAAQ,cAAS,SAAT,mBAAe,IAAI,GAAG;AAC9B,aAAO,SAAS,KAAK,KAAK;AAAA,IAC9B;AACA,UAAM,IAAI,MAAM,wCAAwC;AAAA,EAC5D,SAAS,GAAP;AACE,UAAM,IAAI,MAAM,2BAA2B,gBAAgB,GAAG;AAAA,EAClE;AACJ;AAOA,eAAe,gBAAgB,MAAc,YAAqC;AAvElF;AAwEI,MAAI;AACA,UAAM,MAAM,0EAA0E,qBAAqB;AAAA,MACvG;AAAA,IACJ;AACA,UAAM,WAAW,UAAM,aAAAA,SAAM,EAAE,KAAK,SAAS,KAAM,CAAC;AACpD,QAAI,QAAQ,SAAS,IAAI,GAAG;AAExB,aAAO,SAAS,KAAK,GAAG,GAAG;AAAA,IAC/B;AACA,UAAM,IAAI,MAAM,wCAAwC;AAAA,EAC5D,SAAS,GAAP;AACE,UAAI,OAAE,aAAF,mBAAY,YAAW,KAAK;AAC5B,YAAM,IAAI,MAAM,2BAA2B,+CAA+C;AAAA,IAC9F,OAAO;AACH,YAAM,IAAI,MAAM,2BAA2B,gBAAgB,GAAG;AAAA,IAClE;AAAA,EACJ;AACJ;",
  "names": ["axios"]
}
